** Golang

*** internals
1. Go 101, <https://go101.org/article/101.html>
2. Go语言设计与实现, <https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-ir-ssa/>
3. Go internals, <https://github.com/teh-cmc/go-internals>

*** performance

**** guide
1. go-perfbook, <https://github.com/dgryski/go-perfbook>
2. High Performance Go Workshop, <https://github.com/davecheney/high-performance-go-workshop>
3. Diagnostics, <https://golang.org/doc/diagnostics.html>
4. Basics of benchmarking, profiling and tracing with Go, <https://github.com/samonzeweb/profilinggo>
5. Debugging performance issues in Go programs, <https://github.com/golang/go/wiki/Performance>
6. Profiling Go Programs, <https://blog.golang.org/pprof>

7. (2020-01-03) Continuous profiling in Go with Profefe, <https://gianarb.it/blog/go-continuous-profiling-profefe>
8. (2017-03-13) Profiling and optimizing Go web applications, <https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/>
9. (2015-08-22) YAPC: Go Debugging, Profiling, and Optimization, <https://docs.google.com/presentation/d/1lL7Wlh9GBtTSieqHGJ5AUd1XVYR48UPhEloVem-79mA/view#slide=id.p>

**** tool
1. golang/perf - Go performance measurement, storage, and analysis tools, <https://github.com/golang/perf>
2. felixge/fgprof - a sampling Go profiler, <https://github.com/felixge/fgprof>
3. profefe/profefe - Continuously collect profiling data for long-term postmortem analysis, <https://github.com/profefe/profefe>

4. (2016-09-25) Go tooling internals, <https://rakyll.org/go-tool-flags/>

**** topic

***** latency
1. Want to Debug Latency, <https://medium.com/@rakyll/want-to-debug-latency-7aa48ecbe8f7>
2. Debugging Latency in Go 1.11, <https://medium.com/@rakyll/debugging-latency-in-go-1-11-9f97a7910d68>

***** escape analysis

****** flaw
1. (2015-02-10) Go Escape Analysis Flaws, <https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/edit>

****** article
1. Allocation efficiency in high-performance Go services, <https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/>
2. (2018-01-22) Escape-Analysis Flaws, <https://www.ardanlabs.com/blog/2018/01/escape-analysis-flaws.html>
3. (2016-10-10) golang: Escape analysis and interfaces, <https://npat-efault.github.io/programming/2016/10/10/escape-analysis-and-interfaces.html>
4. (2015-10-18) Golang escape analysis, <http://www.agardner.me/golang/garbage/collection/gc/escape/analysis/2015/10/18/go-escape-analysis.html>

**** discussion
1. doc: explain how to debug performance problems in go programs, <https://github.com/golang/go/issues/19980>

**** blog
1. Go, the unwritten parts, <https://rakyll.org/>
